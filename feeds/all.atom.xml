<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>thebouv</title><link href="https://thebouv.com/" rel="alternate"></link><link href="https://thebouv.com/feeds/all.atom.xml" rel="self"></link><id>https://thebouv.com/</id><updated>2021-09-06T00:00:00-05:00</updated><entry><title>Learning in public</title><link href="https://thebouv.com/learning-in-public.html" rel="alternate"></link><published>2021-09-06T00:00:00-05:00</published><updated>2021-09-06T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-09-06:/learning-in-public.html</id><summary type="html">&lt;p&gt;Recently inspired by an essay to learn in public, I go over a few of the ways I plan to do that.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I start my new job in about a week, I've been brushing up and dusting off some of my more infrastructure-as-code (IaC) knowledge. I've also been thinking alot about learning and how best to practice it for myself. My new gig is focused on helping my employer mentor new hires, provide continuous learning opportunities for all employees, manage certification and knowledge paths, and more. And I figure a good habit I'd like to practice, and preach at work, is that of Learning In Public.&lt;/p&gt;
&lt;h2&gt;Blogging&lt;/h2&gt;
&lt;p&gt;I'm going to continue blogging here. It's actually been really fun and almost therapeutic as well. I hope to increase my pace and post more frequently. Not that I have an audience to really keep up with (and I don't even use analytics to track if I do have an audience haha).&lt;/p&gt;
&lt;p&gt;I'll probably rearrange the categories/tags too at some point. It's a bit sprawling already and I don't want it to get out of control. And though I like that I have the css set up to support light or dark mode, I just don't like the default being light mode. I'm either going to change that or just force dark mode and stop the switching. Sorry, not sorry. I just prefer the look and maybe it calls out to my high school days as a pseudo-goth.&lt;/p&gt;
&lt;p&gt;Speaking of an audience: might be easier to to get one now because I turned on atom feeds. God I love how nice &lt;a href="https://www.getpelican.com"&gt;Pelican&lt;/a&gt; is to add things to. I should do RSS too. I know RSS and atom readers aren't as popular as they used to be but hey, it was easy to add.&lt;/p&gt;
&lt;h2&gt;Week Notes&lt;/h2&gt;
&lt;p&gt;I only recently remembered week notes. I heard about the concept a couple years ago, but never took up the habit. I plan to change that now and of course I'll be posting them here. I may cross-post on Twitter or somewhere else too.&lt;/p&gt;
&lt;p&gt;It'll probably take me a while to hit my pace with it and know what I do or do not want in those notes. How light or verbose I want to go with them. I'm going to research some examples and see what fits me.&lt;/p&gt;
&lt;h2&gt;TILs&lt;/h2&gt;
&lt;p&gt;I'm late to the party, just like with weeknotes, but I'm going to start recording Things I Learn in a &lt;a href="https://github.com/thebouv/til"&gt;til repo&lt;/a&gt;. Initially I won't bother organizing it and will just leave the Markdown files right at the root level. Eventually I'll create folders and structure. And of course a Table of Contents will follow (and likely be automated in a future post).&lt;/p&gt;
&lt;p&gt;This will be frequently updated is my hope and since I'm moving into this new role, I'll have a lot more ideas to jot down. I may even convert some of my old &lt;a href="https://gist.github.com/thebouv"&gt;gists&lt;/a&gt; into these retroactively. Is that allowed? "Yesterday I learned"? Oh well, I'll do that but not go too crazy backfilling. I want to see this grow while I'm in this learning-focused job.&lt;/p&gt;
&lt;h2&gt;More to come&lt;/h2&gt;
&lt;p&gt;I haven't decided on anything else yet. I'll cross-post some blog posts to &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; and get real eyes on my public learning. There are also a lot of ideas I'll be looking at in this essay that encouraged me to &lt;a href="https://www.swyx.io/learn-in-public/"&gt;learn in public&lt;/a&gt;.&lt;/p&gt;</content><category term="learning"></category><category term="learning"></category><category term="career"></category></entry><entry><title>Setting up my new Mac</title><link href="https://thebouv.com/setting-up-my-new-mac.html" rel="alternate"></link><published>2021-08-23T00:00:00-05:00</published><updated>2021-08-23T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-08-23:/setting-up-my-new-mac.html</id><summary type="html">&lt;p&gt;Starting a new job soon and have my brand new 13" MacBook Pro sent to me. Decided to document how I'm setting it up before the gig starts.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm starting a new job soon after 7 years at my previous company. As I was installing a few things I decided I should document what I normally do. This isn't a deeply technical article, and is really just a bunch of my opinions, but I think it'll be interesting to some.&lt;/p&gt;
&lt;p&gt;I personally use a 15" MacBook Pro (what I'm writing this article on) and love it; though I do feel like the TouchBar is still one of the dumbest features ever added to the lineup. At least the new 13" version I have, still Intel not M1, is that it has a physical escape key. Thank gods for that -- the virtual one on my personal machine agitates me to this day.&lt;/p&gt;
&lt;h2&gt;Let's delete a lot of stuff&lt;/h2&gt;
&lt;h3&gt;Dock&lt;/h3&gt;
&lt;p&gt;I'm a fan of deleting stuff. I feel like too many people keep too many things on their machines. The very first thing I do when I set up a machine is to delete software. For this machine, I immediately clear the 20+ icons in the Dock. My personal machine only has Finder, Firefox, iTerm2, and VSCode as the permanent apps -- then the Downloads folder and Trash after the divider. I don't understand having more than that as these are the apps I use the most often. Anything else is &lt;strong&gt;&amp;#x2318; + Spacebar&lt;/strong&gt; away with Spotlight Search.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/dock.png" alt="an image of my sparse dock, with only a few permanent icons"&gt;&lt;/p&gt;
&lt;h3&gt;Apps&lt;/h3&gt;
&lt;p&gt;I also don't have any reason to keep any of the Apple Suite -- literally no one I know uses Pages, Keynote, or any other pieces. Either we have a license to Office365, or GSuite is used. And quite frankly -- I hope I never have to make another PowerPoint/Keynote or Word Doc the rest of my career.&lt;/p&gt;
&lt;p&gt;This is also true for GarageBand and iMovie. Just 100% useless on my dev machine for work. But they're also gone from my home machine.&lt;/p&gt;
&lt;p&gt;If I could delete more apps I would, but for some reason Chess, Mail, Messages, and others I am not allowed to remove. Reminds me of IE in the Windows world. Do any of the apps take up a lot of space? No, but dammit, I want to delete them. I've read a few articles on how to do it by disabling SIP and more, but at the end of the day I don't wanna mess with that. More a curiosity than anything.&lt;/p&gt;
&lt;h3&gt;zsh&lt;/h3&gt;
&lt;p&gt;I know how awesome zsh is. And Apple thinks so too because now it is the default shell for OS X. However, I've used bash for 20 years and don't really feel like changing. That's pretty much it -- none of the features of zsh impress me enough to change, so I make sure to &lt;code&gt;chshell&lt;/code&gt; and also add in an env to stop Apple's insistence that I use zsh when I open a terminal (added to my dotfiles of course which you will see below).&lt;/p&gt;
&lt;h3&gt;Some trackpad stuff&lt;/h3&gt;
&lt;p&gt;I hate Apple's "natural scrolling" bullshit. Not even going to hide it. And most of the gestures I end up accidentally triggering all the damn time so I turn off a lot of those too.&lt;/p&gt;
&lt;p&gt;For Point and Click settings I turn off "Look up &amp;amp; data detectors" and "Tap to click". I set the secondary click to be bottom right corner. &lt;/p&gt;
&lt;p&gt;For the Gestures setting, I only leave on "Swipe between pages" and "Swipe between full-screen apps". I detest the rest of them.&lt;/p&gt;
&lt;h2&gt;Now to add things!&lt;/h2&gt;
&lt;h3&gt;Brew&lt;/h3&gt;
&lt;p&gt;Brew gets installed immediately. It is just too handy of a package manager not to do so and is a predecessor to a lot of the other software I want to install.&lt;/p&gt;
&lt;h3&gt;iTerm2&lt;/h3&gt;
&lt;p&gt;The default Termina.app in Mac OS X is okay, but iTerm2 just overall feels better. Snappier, tabbed, and &lt;a href="https://iterm2.com/features.html"&gt;a ton of other features&lt;/a&gt; makes it is my go to. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install --cask iterm2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;Well, as python is my favorite language, pyenv is an immediate add. Helps manage python versions on my machine including the global one. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;git&lt;/h3&gt;
&lt;p&gt;Gotta get the real git and easily keep it up to date. The default one with XCode tools (which are necessary to install when installing Brew) lags behind official releases and that has bit me once or twice in the past.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;dotfiles&lt;/h3&gt;
&lt;p&gt;Now that I have my iTerm all set up, I want my colors, aliases, and other things from my dotfiles. Thankfully I maintain them as a repo so I can use them anywhere I want. I simply clone &lt;a href="https://github.com/thebouv/dotfiles"&gt;my dotfiles repo&lt;/a&gt; and run &lt;code&gt;./bootstrap.sh&lt;/code&gt; to install them.  My dotfiles actually need some love to add in a few random things, or to even simplify pieces that I don't utilize. If you compare my &lt;a href="https://github.com/thebouv/dotfiles"&gt;dotfiles&lt;/a&gt; to that of the &lt;a href="https://github.com/mathiasbynens/dotfiles"&gt;parent repo&lt;/a&gt; you can see I've already done a few passes of simplification.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/thebouv/dotfiles
&lt;span class="nb"&gt;cd&lt;/span&gt; dotfiles
./bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;p&gt;I open Safari once on the machine to download Firefox. I just can't get used to Safari and I prefer a lot of the built in privacy features of Firefox like encrypted DNS. Not to mention the extensions system where I immediately install uBlock Origin, Facebook Container, and my password manager. I also remove Pocket from the toolbar cause I've never used it and have no intention to do so now. I try to stay as extension-lite as I can in Firefox to keep bloat down.&lt;/p&gt;
&lt;p&gt;I should have looked to see if I could install via brew but didn't so did it the traditional way via the Firefox/Mozilla website.&lt;/p&gt;
&lt;h3&gt;VS Code&lt;/h3&gt;
&lt;p&gt;And of course, I have to get VS Code as soon as possible. Thankfully even VS Code is installable via Brew and that's exactly what I do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install --cask visual-studio-code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Rectangle&lt;/h3&gt;
&lt;p&gt;Previously I used to always install Spectacle as a window management tool for OS X but it is no longer actively developed. Rectangle is the replacement and of course it is on Brew too.&lt;/p&gt;
&lt;p&gt;I really can't function without this app. My muscle memory for moving windows around is strongly keyboard based and when setting up Rectangle it forgivingly allowed me to use Spectacle shortcut combos without needing to learn new ones for Rectangle.&lt;/p&gt;
&lt;p&gt;I actually need to switch this personal laptop over to it as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install --cask rectangle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Physical stuff&lt;/h2&gt;
&lt;p&gt;Because I am known to be a fan of stickers for my laptops I immediately have to buy some things.&lt;/p&gt;
&lt;p&gt;First up is a hard plastic shell for the laptop itself. It is a shame to hide the slick looking dark metal casing, but I can't have any stickers potentially gumming it up. Plus, adding a case gives it more protection and a way to swap out cases if I want new stickers or a new look in the future.&lt;/p&gt;
&lt;p&gt;My last work laptop had a light purple look to it with a matte finish, but I found the matte didn't take as well as gloss to removing stickers over time if they start to peel.&lt;/p&gt;
&lt;p&gt;So my new case is bright orange, gloss, and comes with a silicone keyboard cover. It's nice that this is a bundle cause I always buy keyboard covers for MacBook Pros as well. Their keyboards have been known on some models to be very sensitive to dust (looking at you butterfly keyboard on my personal laptop).&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/maccase.png" alt="product image for the orange case I bought for my mac"&gt;&lt;/p&gt;
&lt;p&gt;And of course I need to buy stickers next. Usually I can pull from my stacks and stacks of left overs. But most of those are programming related and my career has shifted over time to more &lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_code"&gt;Infrastructure as Code&lt;/a&gt; and other &lt;a href="https://en.wikipedia.org/wiki/DevOps"&gt;DevOps tooling&lt;/a&gt; related.&lt;/p&gt;
&lt;p&gt;So now I'm on the hunt for stickers for TerraForm, Jenkins, AWS and Azure, and more. Eventually I'll edit this post and add in pics of the laptop once it is all covered up in sticker goodness.&lt;/p&gt;
&lt;h2&gt;That's all?!&lt;/h2&gt;
&lt;p&gt;Not really. I'm also going to install things specifically for work like Terraform, Azure and AWS CLI clients, Docker, and tools specifically for work. I didn't go into detail for each because pretty much everything I've said above is what I'd do on any new dev machine, even a personal one.&lt;/p&gt;
&lt;p&gt;I'll post soon about my new role and likely more about my specific tooling for that as well.&lt;/p&gt;</content><category term="career"></category><category term="career"></category><category term="development"></category><category term="hardware"></category></entry><entry><title>Director of Miscellaneous</title><link href="https://thebouv.com/director-of-miscellaneous.html" rel="alternate"></link><published>2021-07-09T00:00:00-05:00</published><updated>2021-07-09T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-07-09:/director-of-miscellaneous.html</id><summary type="html">&lt;p&gt;Crazy week of miscellaneous sums up my job pretty well.&lt;/p&gt;</summary><content type="html">&lt;p&gt;People wonder what I mean by Director of Miscellaneous that I joke is my title.&lt;/p&gt;
&lt;p&gt;Well this week I:&lt;br&gt;
&lt;em&gt; Set up a new Linux vm to help one engineering team to handle secure file transfer for a trial run with a client&lt;br&gt;
&lt;/em&gt; Got XCode set up to ad-hoc distribute a test app (I am not a mobile developer or their lead, but stepping in as lead in interim)&lt;br&gt;
&lt;em&gt; Set up our enterprise nuget registry with example repo &amp;amp; docs on how to repeat (I am not a .NET engineer at all)&lt;br&gt;
&lt;/em&gt; Started an architecture plan for a multi-tenant iOS app (again, not a mobile dev myself, and this includes all the backend architecture too)  &lt;/p&gt;
&lt;p&gt;And that’s just some of the random highlights. At any other given time I'm managing my team, building prototypes of ideas or containerizing someone else's proof-of-concept so we can test it, working on continuous learning plans for my team (and hopefully model for other teams), or doing CloudOps/DevOps work.&lt;/p&gt;
&lt;p&gt;Quite frankly this has just always been my career over 20 years. I thrive on variety, juggling multiple types of projects, and both overseeing things and being at the ground level building at the same time.&lt;/p&gt;
&lt;p&gt;Variety is the spice of life right? Now I'm going to go take a nap. ;)&lt;/p&gt;</content><category term="career"></category><category term="career"></category></entry><entry><title>Developing a Continuous Learning Environment</title><link href="https://thebouv.com/developing-a-continuous-learning-environment.html" rel="alternate"></link><published>2021-06-28T00:00:00-05:00</published><updated>2021-06-28T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-06-28:/developing-a-continuous-learning-environment.html</id><summary type="html">&lt;p&gt;What I feel are key pieces of setting up a continuous learning environment in your company. Some obvious, some not.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In developing my own plans for continuous learning at various employers, I've decided to share some of my insights for creating your own culture of learning. Not just the training materials you need, but how to follow through and make sure it becomes a key part of your team's personal development success.&lt;/p&gt;
&lt;p&gt;I believe these are the key pieces to having a successful and enjoyable continuous learning environment on an engineering team:&lt;/p&gt;
&lt;h3&gt;Start somewhere&lt;/h3&gt;
&lt;p&gt;I know that sounds cliché but it really is truth. Don't worry about having the perfect plan out of the gate. Just like any technical decision you make on your team this plan should also be iterated on.&lt;/p&gt;
&lt;p&gt;Take fast feedback and make changes. Then send it back out into the wild with a sample of your team to try it out. Have a new doc system they should read from? Ask them their opinions on it. See what you can improve. Have a new vendor for training videos? Get trial accounts first and see how the quality is, what features they offer, and how your co-workers like the style of instruction.&lt;/p&gt;
&lt;p&gt;Whatever you do don't sit back on your hands and force any particular methodology on to anyone.&lt;/p&gt;
&lt;h3&gt;Speaking of one-size-fits-all&lt;/h3&gt;
&lt;p&gt;Don't just provide a single method for learning. Not every engineer learns in the same way. I spend a lot of time on various developer Discord servers helping people and a question that comes up a lot is "How do I learn X?"&lt;/p&gt;
&lt;p&gt;Inevitably people point out their favorite links to YouTube videos or some paid course they've taken.&lt;/p&gt;
&lt;p&gt;But my first questions are always "How do you prefer to learn? Book? Video? Deep dive and then start a small project? Learn the bare minimum and then dive in head first to a big project?"&lt;/p&gt;
&lt;p&gt;Have a flexible learning system and paths to increasing knowledge by offering a variety of sources for topics when you can.&lt;/p&gt;
&lt;h3&gt;Don't do it all yourself&lt;/h3&gt;
&lt;p&gt;Sure you might be photogenic and a wiz on the camera. But do you have time to make all the video content yourself? Likely not if you're like me and juggling this continuous learning program amongst other duties.&lt;/p&gt;
&lt;p&gt;Seek out the best materials by talking to colleagues inside and outside of your company. There are professional developers, developer advocates, and just full-time trainers making amazing content. Find it and use it. And of course, curate it to keep it up to date.&lt;/p&gt;
&lt;h3&gt;Stay up to date&lt;/h3&gt;
&lt;p&gt;Curating the content means &lt;em&gt;continuously&lt;/em&gt; curating it. Don't let it get stale or out of date. If you recommend a particular course about a subject make sure to see if new versions come out. If they keep pace with the changes to the language, framework, or platform the course is about.&lt;/p&gt;
&lt;p&gt;And don't be afraid to reach out to vendors to let them know if their content is stale. Keep them on their toes and be the squeaky wheel. I'm sure they're already working on updating content if they're reputable, but it doesn't hurt to keep in contact with them. Especially if you're paying for a learning service.&lt;/p&gt;
&lt;h3&gt;Choose a great vendor&lt;/h3&gt;
&lt;p&gt;Though ultimately you're going to have a variety of sources for your team to learn from (as mentioned above not everyone learns the same). But you'll likely have 1-2 paid vendors where you can access their content and follow learning paths.&lt;/p&gt;
&lt;p&gt;Make sure they have a great interface for keeping track of what track people are on, their progress, their "grades", and whether they're hitting milestones. This is often accompanied by awesome dashboards, graphs, etc. A shout out to sites like &lt;a href="https://www.pluralsight.com/"&gt;PluralSight&lt;/a&gt; of which I'm a big fan.&lt;/p&gt;
&lt;p&gt;Even better if they have an API you can talk to because you should ...&lt;/p&gt;
&lt;h3&gt;Have a single pane of glass to show progress&lt;/h3&gt;
&lt;p&gt;Be ready to develop your own single pane of glass where you can show off all the progress being made on learning paths, certifications, and labs.&lt;/p&gt;
&lt;p&gt;It is great that &lt;a href="https://www.pluralsight.com/"&gt;PluralSight&lt;/a&gt; has a dashboard to track those things for their content. But keep in mind you should have MORE than a single way to learn things. You may be tracking certification progress in Azure's or AWS's own interface. Learning paths from PluralSight. Book checkouts / book purchases. Proof-of-concept or experiments used to learn new frameworks.&lt;/p&gt;
&lt;p&gt;Document all that progress and have it accessible to everyone in the company so they can see the engineers are knocking it out of the park.&lt;/p&gt;
&lt;h3&gt;Provide education budgets&lt;/h3&gt;
&lt;p&gt;You curate resources, gather materials, and point everyone to get going. But your co-workers are going to find other resources too. Be prepared to give them budgets to pay for their own books, videos, Udemy classes, or other related educational materials.&lt;/p&gt;
&lt;p&gt;Then ask them how it went and if their material was great for that particular topic, go full circle and see how you can get it set up for others to learn from too. Envelop it into your on-going plans for education.&lt;/p&gt;
&lt;p&gt;The more automated you can make this the better. Don't get hung up on expense reports, approvals, etc.  Give them a monthly or yearly budget and get out of the way they're using it.&lt;/p&gt;
&lt;h3&gt;Be prepared to do the material too (at least some of it)&lt;/h3&gt;
&lt;p&gt;This is probably a little controversial as how can any one person make time to go through all the same training material.&lt;/p&gt;
&lt;p&gt;It is potentially a lot, I know.&lt;/p&gt;
&lt;p&gt;But the value is tremendous if you can have intelligent, deep discussions with learners as they're also going through the material. Even if you're already a CSS or AWS expert, when new hires are going through the material they'll likely need someone to talk to about what they're learning.&lt;/p&gt;
&lt;p&gt;Encourage inter-team discussions and to speak with their supervisor as well. Ultimately though, you'll get seen as an expert and whether or not you can answer them is immaterial. You just need to be available to them &lt;em&gt;and&lt;/em&gt; be available to help them figure things out even if you don't know the material in depth. Be good at &lt;strong&gt;finding answers&lt;/strong&gt; and if you can, teach them how to do that better too.&lt;/p&gt;
&lt;h3&gt;Don't force certifications&lt;/h3&gt;
&lt;p&gt;Make official certifications available and obviously pay for them as well. But do not make them mandatory. They're nice to have and I feel like the studying up to the test and the tests themselves often teach a lot.&lt;/p&gt;
&lt;p&gt;However, not everyone is great at taking those kinds of tests and there should be a low-pressure environment to learn in. Support them if they want to get certified; but be okay with individuals not persuing.&lt;/p&gt;
&lt;h3&gt;Learn, Share, Misc&lt;/h3&gt;
&lt;p&gt;At every company I've been at since 1999 I've set up bi-weekly meetings titled "Learn, Share, Misc".&lt;/p&gt;
&lt;p&gt;The format is simple. Everyone looks out for awesome articles, great videos, how-tos, tweets, anything that they think is worth bringing up and they send it to you with a few words to synopsis why they want to share this with the group.&lt;/p&gt;
&lt;p&gt;Prepare a deck or even just a list of links to these things and pull it up on a shared screen. Then, importantly, have the person talk about why this item is great. If it is new tech, they can say "We should look into this for our product because we've been needing X feature" or "Look at how Netflix handles their chaos engineering" or even the occasional "This comic from /r/programmerhumor really stood out to me and I wanted to share. Doesn't it remind you of that problem we had with memory leaks? Haha."&lt;/p&gt;
&lt;p&gt;But also take this time to share internal knowledge and gains. Look at this cool new widget the UX team designed. Look at this proof-of-concept we finished and could use some volunteer testers for. Share all of those things too, but be careful not to let it turn into a sprint review session.  Each topic covered should be thought of like a lightning talk -- 5 minutes or less of back and forth.&lt;/p&gt;
&lt;p&gt;Then most importantly, collect the links, and share them on your company intranet, Sharepoint, or other knowledge sharing system. That way people that couldn't attend or want to dive deeper on some topic can find the links and do their own digging on the topic.&lt;/p&gt;
&lt;h3&gt;Have a knowledge sharing system&lt;/h3&gt;
&lt;p&gt;And of course, have a knowledge sharing system in place. Hopefully you already have a documentation system in place so see if it can ride along that. Otherwise, consider using any of the many free wikis out there, Confluence if you have it, or even a knowledge repo in your git system of choice like GitLab or GitHub.&lt;/p&gt;
&lt;p&gt;What's important is that over time you grow out a huge list of topics of interest that can be revisted by anyone at anytime for learning or inspiration.&lt;/p&gt;
&lt;h3&gt;Let them apply the new knowledge&lt;/h3&gt;
&lt;p&gt;Nothing's worse than learning a new thing or receiving a new certification and then ... nothing happens with it.&lt;/p&gt;
&lt;p&gt;This can't always be avoided obviously, but attempts should be made for those employees to put their new learning into action. Put them on a side-project they can do between sprints. Lend them to another team -- if your backend dev is growing their frontend skills, let them tackle some tickets from the other teams.&lt;/p&gt;
&lt;p&gt;Don't let their hard work atrophy.&lt;/p&gt;
&lt;h3&gt;Have one on ones with people not on your team&lt;/h3&gt;
&lt;p&gt;Meet regularly with various members of the teams you serve. And not just the managers or directors, but the individuals that are new to the company too. Ask them how they've seen these programs run before and make sure to set up that you have an open door for new ideas.&lt;/p&gt;
&lt;p&gt;It's important to talk to the managers too. Find out what they think is or is not working, but don't just rely on their word. They may be frustrated that so-and-so hasn't completed their Angular training yet, but likely you have insight into why that is because you've established a rapport with everyone.&lt;/p&gt;
&lt;p&gt;Help them navigate that discussion with their employee. Find out what is roadblocking the slow-learner and help with those roadblocks if you can. Overall, you become responsible for helpign them educate themselves and if they can never get to the learning aspect of their job because they're swamped with work, talk to their manager about making time during sprints.&lt;/p&gt;
&lt;h3&gt;Make it a feature&lt;/h3&gt;
&lt;p&gt;Continuous learning &lt;a href="https://thebouv.com/chasing-features.html"&gt;is a feature too&lt;/a&gt;. Make sure everyone is making time for it from the c-level down.&lt;/p&gt;
&lt;p&gt;There's no point in setting up a continuous learning plan for your company if they never make time for employees to learn &lt;em&gt;on company time&lt;/em&gt;. If employees choose to learn on their own time, that's awesome -- hang on to those folks tightly.&lt;/p&gt;
&lt;p&gt;But also don't expect all employees to do this. Everyone has different pacing and different responsibilities outside of work hours. Just like cleaning up technical debt, learning is often seen as "we will do it later" and that's going to bite you in the end.&lt;/p&gt;
&lt;p&gt;Because your competitors are learning and pushing forward. They're upskilling their teams and they're going to eat your company for lunch unless you continue to grow your staff's capabilities. Invest in your employees and take care of them. They're just as important as any set of features you plan to add this quarter, if not more so.&lt;/p&gt;
&lt;p&gt;Mentally stimulated employees are happy employees and happy employees do great work.&lt;/p&gt;</content><category term="learning"></category><category term="career"></category><category term="devops"></category><category term="learning"></category></entry><entry><title>Chasing Features</title><link href="https://thebouv.com/chasing-features.html" rel="alternate"></link><published>2021-06-15T00:00:00-05:00</published><updated>2021-06-15T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-06-15:/chasing-features.html</id><summary type="html">&lt;p&gt;Inspired by a tweet from another person, I wanted to talk about chasing features that are shiny, and ignoring things that aren't "features" (even though they are).&lt;/p&gt;</summary><content type="html">&lt;p&gt;Don’t just chase “features”. As many have said, and it’s highlighted below in Dan Mayer's tweet, lots of things are “features”. Far too often there are members of your organization that only concentrate on visible, consumer-facing features. And those are definitely nice and "ooh-ahh"-inspiring. And those features win accolades and obvious praise from users and even co-workers.&lt;/p&gt;
&lt;p&gt;But there's a lot more to building great software than constantly shotgunning features into your project. If you're doing that, you're very likely ignoring so many other important aspects of both brown-field and green-field development.&lt;/p&gt;
&lt;p&gt;Make sure to take the time to document technical debt and find a place for it in sprint. Dedicate a day a week or two days per sprint to solely cleaning up technical deb and performing maintenance or writing much needed documentation.&lt;/p&gt;
&lt;p&gt;The less technical debt you let pile up, the faster your development team can build the visible features. The better your documentation, the faster new team members can get up to speed and faster they can deliver value to your customers. Optimizing code and concentrating on maintenance tasks so they don't get forgotten makes your software more delightful to use -- making it sticky for your users.&lt;/p&gt;
&lt;p&gt;So the next time a product manager, sales team member, or even another developer tells you to ignore those things and only concentrate on visible features, let them know:&lt;/p&gt;
&lt;p&gt;Cleaning up technical debt is a feature!  &lt;/p&gt;
&lt;p&gt;Performance work is a feature!  &lt;/p&gt;
&lt;p&gt;Maintenance work is a feature!  &lt;/p&gt;
&lt;p&gt;Cleaning up errors in logs is a feature!  &lt;/p&gt;
&lt;p&gt;Writing tests is a feature!  &lt;/p&gt;
&lt;p&gt;The invisible work is what keeps the foundation solid to build all features on.  &lt;/p&gt;
&lt;p&gt;&lt;img src="/images/dan_mayer_tweet.jpg"&gt;&lt;/p&gt;</content><category term="career"></category><category term="career"></category><category term="devops"></category><category term="development"></category></entry><entry><title>My thoughts on Amazon Sidewalk</title><link href="https://thebouv.com/my-thoughts-on-amazon-sidewalk.html" rel="alternate"></link><published>2021-05-15T00:00:00-05:00</published><updated>2021-05-15T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-05-15:/my-thoughts-on-amazon-sidewalk.html</id><summary type="html">&lt;p&gt;My brief thoughts on Amazon Sidewalk and why I'm ditching Alexa hardware&lt;/p&gt;</summary><content type="html">&lt;p&gt;I originally posted these thoughts on &lt;a href="https://www.linkedin.com/in/thebouv"&gt;my LinkedIn profile&lt;/a&gt; but wanted to revisit here as well. It is not an in-depth technical analysis. Just a bit of a rant and declaration. A future post with more geeky thoughts is in order for sure. &lt;/p&gt;
&lt;p&gt;First the announcement release about &lt;a href="https://www.amazon.com/Amazon-Sidewalk/b?node=21328123011"&gt;Amazon Sidewalk&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Amazon did discuss this before and I remember reading about it on Hacker News or some other aggregate site a few months ago. This is still a terrible, terrible idea and I'll definitely be making sure to disable anything that has Sidewalk implemented. Because rest assured that even though you did the right thing and didn't connect your SmartTV to your home network, Sidewalk will eventually make its way into non-Amazon made products and spread it. That's the goal and one can only imagine the impact of all those devices constantly chatting and &lt;em&gt;sharing information&lt;/em&gt;. That's the real scary part.&lt;/p&gt;
&lt;p&gt;It is my network. That I designed and paid for. It is my internet connection that I pay for. I do NOT want to share even a single packet of information on my network without my explicit permission. Creating this shadow network is complete and total bull crap. And in a month of usage the release above says it is capped aet 500MB. It shouldn't even be a single byte!&lt;/p&gt;
&lt;p&gt;Shame on you Amazon!&lt;/p&gt;
&lt;p&gt;And this is exactly why I'm tossing out my Alexa and building my own voice assistant where I own all the data. So look out for another experiment soon. This now bumps up in priority. :)&lt;/p&gt;</content><category term="homelab"></category><category term="homelab"></category><category term="iot"></category></entry><entry><title>DevOps teams are an anti-pattern, but ...</title><link href="https://thebouv.com/devops-teams-are-an-anti-pattern-but.html" rel="alternate"></link><published>2021-04-15T00:00:00-05:00</published><updated>2021-04-15T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-04-15:/devops-teams-are-an-anti-pattern-but.html</id><summary type="html">&lt;p&gt;My response to someone about how they feel like they're doing DevOps wrong at their company. And asking why is a DevOps team frowned upon.&lt;/p&gt;</summary><content type="html">&lt;p&gt;People put too much pressure on themselves to do DevOps the "right" way or that they're not doing it like they read about at Netflix or Amazon or any other examples. At small to medium sized companies introducing these new concepts, someone(s) need to own getting it started and to be the evangelists.&lt;/p&gt;
&lt;p&gt;Yes, long-term having only a single team as your "DevOps" team is an anti-pattern, but you gotta start somewhere. &lt;/p&gt;
&lt;p&gt;What follows is my response to post online about how someone was feeling like they're doing DevOps wrong at their company. And asking why is a DevOps team frowned upon.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I look at it like this as I currently have a DevOps title but didn’t really want one.&lt;/p&gt;
&lt;p&gt;DevOps should be your entire company’s culture. Shift responsibility left. Let the devs run what they build.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But&lt;/em&gt; you have to start somewhere. You need people to be the catalyst. They need to learn Jenkins first to help others. Much like you describe. A central team is a DevOps anti-pattern long term but I feel like they’re necessary at first. To be the evangelists. To be the first to install the tooling, get it working in your SDLC, to create the pipelines and grease the cogs to get the culture moving.&lt;/p&gt;
&lt;p&gt;They likely own the tooling too. Or a tooling team splits off at some point. Someone needs to manage the tooling and host it and upgrade it and juggle licensing.&lt;/p&gt;
&lt;p&gt;But be open to others learning. Cross train devs and ops people. Make sure not to bottleneck people needing resources. Find ways they can fire up their own vms, containers, app services, storage accounts, etc. Eventually that is.&lt;/p&gt;
&lt;p&gt;Gotta start somewhere. Not everyone is or can be a FAANG company. Not everyone needs every aspect of DevOps people try to shove your way. Not everyone needs to throw k8s at every problem. And so on.&lt;/p&gt;
&lt;p&gt;Improve tooling.&lt;br&gt;
Improve dev empowerment.&lt;br&gt;
Improve SDLC.&lt;br&gt;
Improve testing.&lt;br&gt;
Improve blameless culture.&lt;br&gt;
Improve observability.&lt;br&gt;
Improve continuously.  &lt;/p&gt;
&lt;p&gt;Do those and your company/team will become DevOps too. Your team will evolve too. You’ll continue to expand what you offer and what you can institutionalize.&lt;/p&gt;
&lt;p&gt;Or maybe they resist every damn change you propose and never want to improve. At that point you flip the proverbial table and find a place where you CAN do those things. :)&lt;/p&gt;</content><category term="meta"></category><category term="devops"></category></entry><entry><title>Changing GitHub Enterprise users from LDAP to local</title><link href="https://thebouv.com/changing-github-enterprise-users-from-ldap-to-local.html" rel="alternate"></link><published>2021-04-05T00:00:00-05:00</published><updated>2021-04-05T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-04-05:/changing-github-enterprise-users-from-ldap-to-local.html</id><summary type="html">&lt;p&gt;I needed to have most users move to a different AD/LDAP server but leave a few behind on local logins. The instructions from GitHub support had issues I had to figure out on my own.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;The company I work for recently split off our entire software engineering team, part of other teams, and backoffice people into a stand alone independent software vendor. For the time being we're sharing a single GitHub Enterprise instance on prem and as part of the transition we've moved the new company staff off to their own Active Directory.&lt;/p&gt;
&lt;p&gt;Unlike other tooling I have in place like Jenkins or Harbor, GitHub Enterprise only supports using a single AD/LDAP server (version 3.0.4 as of the publishing of this post). So the 6 or so digital marketing developers left behind at the parent company have to be converted from LDAP auth to local authentication.&lt;/p&gt;
&lt;p&gt;Thankfully this is possible with GitHub Enterprise via this setting:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot of github admin settings to allow local account creation along side ldap accounts" src="images/github-enterprise-ldap-local-setting.png"&gt;&lt;/p&gt;
&lt;h2&gt;But?&lt;/h2&gt;
&lt;p&gt;The issue is that accounts that were previously LDAP are flagged as that and this setting only allows for new accounts.&lt;/p&gt;
&lt;p&gt;I asked GitHub for instructions on how to convert those accounts and they sent me some ghe-console commands to run. And here is what they sent me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If enabled, temporarily disable LDAP sync to prevent it from re-writing the LDAP associations.&lt;/p&gt;
&lt;p&gt;Connect to the server via SSH. Destroy the LDAP mapping for the users you'd like to switch to built-in authentication and set a default password for those users: (replace USERNAME with the user's actual GitHub username, and replace NEW_PASSWORD with a temporary password)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="n"&gt;ghe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USERNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldap_mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy&lt;/span&gt;
  &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NEW_PASSWORD&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USERNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure these users are not in the LDAP directory before they attempt to login again.  &lt;/p&gt;
&lt;p&gt;Re-enable LDAP sync if necessary.&lt;/p&gt;
&lt;p&gt;Instruct users to update passwords after logging in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No doubt this is from their support team's knowledgebase. The problem is it throws errors on trying to use the code as-is.&lt;/p&gt;
&lt;p&gt;Of course, I only had a few tracebacks to go off of like this one for &lt;code&gt;update_attributes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
        3: from /github/script/console:92:in `&amp;lt;main&amp;gt;&amp;#39;
        2: from (irb):4
        1: from /github/vendor/gems/2.7.1/ruby/2.7.0/gems/activemodel-6.1.0.rc1.8389f99/lib/active_model/attribute_methods.rb:469:in `method_missing&amp;#39;
NoMethodError (undefined method `update_attributes&amp;#39; for #&amp;lt;User:0x000000000000&amp;gt;)
Did you mean?  update_attribute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So then I tried to change it to &lt;code&gt;update_attribute&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
        4: from /github/script/console:92:in `&amp;lt;main&amp;gt;&amp;#39;
        3: from (irb):4
        2: from (irb):5:in `rescue in irb_binding&amp;#39;
        1: from /github/vendor/gems/2.7.1/ruby/2.7.0/gems/activerecord-6.1.0.rc1.8389f99/lib/active_record/persistence.rb:612:in `update_attribute&amp;#39;
ArgumentError (wrong number of arguments (given 1, expected 2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Damn. Well, it sorta &lt;em&gt;looks&lt;/em&gt; like I'm sending two arguments instead of one, so what's going on?&lt;/p&gt;
&lt;p&gt;Since I now know we're dealing with Ruby in the &lt;em&gt;ghe-console&lt;/em&gt; I start looking up some docs and find out that &lt;strong&gt;update_attribute&lt;/strong&gt; only does one attribute at a time and whatever format I'm sending it doesn't like.&lt;/p&gt;
&lt;p&gt;I also look up &lt;strong&gt;update_attributes&lt;/strong&gt; and find out it was deprecated. You only need &lt;strong&gt;update&lt;/strong&gt; in this case. So I try &lt;strong&gt;update&lt;/strong&gt; with the same params and it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or what I originally tried works too using a different syntax for sending the attributes that I saw in the &lt;strong&gt;update&lt;/strong&gt; documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Gut?&lt;/h2&gt;
&lt;p&gt;Mostly just chose that subtitle to rhyme with the others, but actually using your gut to do such debugging is something I recommend. The longer you're in this business, the more experience you have running up against just weird scenarios like the above. My vendor gave me syntax that was actually out of date, but I used the info given to me for a language I have zero experience with to debug what to do next.&lt;/p&gt;
&lt;p&gt;And I wrote them back to let them know to update their knowledgebase.&lt;/p&gt;
&lt;p&gt;So follow your gut! Know how to look up docs even for things you don't know about or langauges you're unfamiliar with. &lt;/p&gt;
&lt;p&gt;Deduce. Experiment. Test. Repeat. It becomes second nature.&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="devops"></category></entry><entry><title>Don't idolize Elon Musk</title><link href="https://thebouv.com/dont-idolize-elon-musk.html" rel="alternate"></link><published>2021-04-02T00:00:00-05:00</published><updated>2021-04-02T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-04-02:/dont-idolize-elon-musk.html</id><summary type="html">&lt;p&gt;I responded to someone on LinkedIn shaming people for using "I don't have time" as an excuse and praising Elon Musk's overworking habits. Wanted to capture my response here as well.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I responded to someone on LinkedIn shaming people for using "I don't have time" as an excuse and praising Elon Musk's overworking habits. Wanted to capture my response here as well.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let's not try to normalize working 85-100 hours a week. That's ridiculous. And shame on you for holding that up as something to aspire too. &lt;/p&gt;
&lt;p&gt;Before spouting some glorification of overworking why don't you do a little math?&lt;/p&gt;
&lt;p&gt;Let's be generous and use the whole seven days in a week. &lt;/p&gt;
&lt;p&gt;168 hours in a week. &lt;/p&gt;
&lt;p&gt;He works 100 leaving 68. Certainly he sleeps but let's say he doesn't get a full 8 (even though that's healthiest). Let's say 6 per night. &lt;/p&gt;
&lt;p&gt;That's 42 hours sleeping. &lt;/p&gt;
&lt;p&gt;So after working and sleeping he's got 26 hours or under 4 hours per day. To eat. And be a parent (lololololol) and a husband and whatever he wants to do "for fun".&lt;/p&gt;
&lt;p&gt;Sounds terrible. No thank you.&lt;/p&gt;
&lt;p&gt;Or maybe this isn't true and "I don't have time" is short for some peoples "I'm depressed because of the pandemic" or "it's hard to balance work and kids and house work when you don't have a billion dollars and staff on hand to do things for you". &lt;/p&gt;
&lt;p&gt;He literally has enough money to have someone wipe his bum for him to save time.&lt;/p&gt;
&lt;p&gt;We're not going to compare ourselves to Elon. No one should. Stop being gross.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/posts/thomas-reck_elon-musk-works-around-85-until-100-hours-activity-6776786764372701184-2e3x"&gt;original post&lt;/a&gt;  &lt;/p&gt;</content><category term="career"></category><category term="career"></category></entry><entry><title>First rack for my homelab</title><link href="https://thebouv.com/first-rack-for-my-homelab.html" rel="alternate"></link><published>2021-03-20T00:00:00-05:00</published><updated>2021-03-20T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-03-20:/first-rack-for-my-homelab.html</id><summary type="html">&lt;p&gt;My first open rack for the homelab and the initial equipment I've put in it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="home lab open rack with new Unifi equipment" src="images/homelab-not-pretty-yet.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It ain’t pretty yet but it’s a start and it’s been mostly fun so far!&lt;/p&gt;
&lt;p&gt;I say mostly fun because running cables in a home from 1914 is a pain in the behind. A lot of plaster and lath walls makes it a challenge and though I haven't had to mess with it too much, I've been doing some planning after getting this equipment and woooooo it will be a hard fight with this old house.&lt;/p&gt;
&lt;p&gt;Equipment pictured above:&lt;br&gt;
Unifi Dream Machine Pro&lt;br&gt;
Unifi PoE switch&lt;br&gt;
AmpliFi HD Mesh&lt;br&gt;
Echogear 20u open rack&lt;/p&gt;
&lt;p&gt;Currently using AmpliFi to create a mesh while I wait for access points for the UDM Pro. Then I’ll just use it as a backup and store it, or see if I can set it up for my daughter's apartment.&lt;/p&gt;
&lt;p&gt;You can also see my stack of ThinkCenter tinys and my Raspberry Pi cluster. I actually plan to rack the Raspberry Pis with a mount I found made for them (either 1u for three or 3u for sideways mounting around 12-15). Not sure how I’m going to arrange the ThinkCenters yet.&lt;/p&gt;
&lt;p&gt;You can also see my tiny little pihole dns servers in their neon green cases. I love the Pi Zero form factor.&lt;/p&gt;
&lt;p&gt;In case I didn’t bring it up before the raspberry pi 4s are for a Kubernetes cluster which will be for continuous learning and experiments, but also to run some custom apps I’m building for my home. And the ThinkCenters are for a Proxmox cluster for vms, experiments, etc.&lt;/p&gt;</content><category term="homelab"></category><category term="homelab"></category><category term="networking"></category></entry><entry><title>Temperature and Humidity Sensors (part one)</title><link href="https://thebouv.com/temperature-and-humidity-sensors-part-one.html" rel="alternate"></link><published>2021-03-18T00:00:00-05:00</published><updated>2021-03-18T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-03-18:/temperature-and-humidity-sensors-part-one.html</id><summary type="html">&lt;p&gt;I have a home from 1914 which has a lot of charm and a lot of issues. One of which is the need to constantly pay attention to the humidity levels and temperature in all floors, finished and unfinished, in the house. This project of my homelab will cover the hardware and custom software I write for it.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;I have a home from 1914 which has a lot of charm and a lot of issues. One of which is the need to constantly pay attention to the humidity levels and temperature in all floors, finished and unfinished, in the house. This project of my homelab will cover the hardware and custom software I write for it.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;4x Raspberry Pi Zero WH (just like the W, but with pre-soldered headers on the GPIO)&lt;br&gt;
4x Raspberry Pi official zero w cases&lt;br&gt;
4x Raspberry Pi official power supplies&lt;br&gt;
4x Gigastone 16gb MicroSDHC  &lt;/p&gt;
&lt;h3&gt;Operating System&lt;/h3&gt;
&lt;p&gt;Though I wish I could use Ubuntu LTS on the Pi Zero W, it doesn't seem to be supported or I at least haven't been able to find out how to boot it. Like my pihole project for the lab, I'm using the most recent official Raspberry Pi OS Lite (because I don't want a desktop environment on this headless computer). And of course I use the Raspberry Pi Imager -- it's just really convenient.&lt;/p&gt;
&lt;p&gt;After I image the SD card I make a couple changes to the config.txt file on the card itself from the host machine I did the imaging from.  This is so I can set the gpu mem split and disable bluetooth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: when the Raspberry Pi imager is done it unmounts the SD card, so you'll need to plug it back in to your host machine to edit the config.txt file.  On my Mac, it mounts as &lt;em&gt;boot&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I add these two lines config.txt. There are a couple of lines that already set dtoverlay that are commented out, so I just put both of these in that area:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpu_mem=16
dtoverlay=disable-bt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Wi-Fi&lt;/h3&gt;
&lt;p&gt;I also want to go ahead and set up the wifi on the pi zero so that when I turn it on it automatically connects.&lt;/p&gt;
&lt;p&gt;Following this &lt;a href="https://learn.adafruit.com/raspberry-pi-zero-creation/text-file-editing"&gt;tutorial&lt;/a&gt; I create the &lt;em&gt;wpa_supplicant.conf&lt;/em&gt; file on the root level of the boot drive while the SD is still connected.&lt;/p&gt;
&lt;h3&gt;SSH&lt;/h3&gt;
&lt;p&gt;SSH is disabled by default so since I want to log in soon after booting it and stay headless, I merely need to add a blank file named &lt;em&gt;ssh&lt;/em&gt; to the root level of the ssd that I still have mounted.&lt;/p&gt;
&lt;p&gt;Once I've done that I eject the SD card and install it into the pi zero.&lt;/p&gt;
&lt;h2&gt;First Boot&lt;/h2&gt;
&lt;p&gt;After I first boot, I want to make sure to make some changes to each device. There's probably a way to get fancy and make this super repeatable, but I'm not installing 100 sensors; I'm installing 4.&lt;/p&gt;
&lt;h3&gt;Wrap Up Setup&lt;/h3&gt;
&lt;p&gt;I find the device on my network by looking at my Unifi OS that shows the whole network as a map and I just found the device and ip there, but I could also scan the network from the command line and look for Raspberry Pi MAC addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;arp -a | grep -i &amp;quot;b8:27:eb\|dc:a6:32&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or if you're on a Mac or a Windows machine that has Bonjour set up you might be able to talk to it at its default hostname on .local via &lt;em&gt;raspberrypi.local&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh pi@ip.address.you.found
# or 
ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: If you use ssh pi@raspberrypi.local more than once because you're setting up multiple sensors, keep in mind ssh is going to complain that raspberrypi.local doesn't match the fingerprint from the last time you did it. Cause each device you set up is unique, but ssh doesn't know that. So I suggest using the IP because it is more likely to be different. And below we're giving each their own hostname anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Change the default password (always a smart thing to do):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update apt and upgrade the OS packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update the hostname. I'm going with a naming scheme of 'temphum1', 'temphum2', etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo vi /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now let's shut it down for now because we're going to be installing the sensor and doing some soldering next before we turn this device back on.&lt;/p&gt;
&lt;p&gt;The part two of this post will be abour the physical aspects of the project like testing out on a breadboard and soldering the real thing together.&lt;/p&gt;</content><category term="homelab"></category><category term="homelab"></category><category term="raspberrypi"></category></entry><entry><title>How I made this site (part two)</title><link href="https://thebouv.com/how-i-made-this-site-part-two.html" rel="alternate"></link><published>2021-03-15T00:00:00-05:00</published><updated>2021-03-15T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-03-15:/how-i-made-this-site-part-two.html</id><summary type="html">&lt;p&gt;Now to finish off the tutorial on how I made this site including previewing the content and automating some tasks with invoke.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last I left off in &lt;a href="how-i-made-this-site-part-one.html"&gt;part one&lt;/a&gt; I generated the content with &lt;code&gt;invoke build&lt;/code&gt;. I want to go over the remaining steps on how to preview the content, how I'm publishing it to GitHub pages with the submodule created previously, and also how I plan to use &lt;strong&gt;invoke&lt;/strong&gt; to automate some of this.&lt;/p&gt;
&lt;h2&gt;Markdown Tweaks&lt;/h2&gt;
&lt;p&gt;First before previewing the content, I had to make some adjustments to how the Markdown is processed, especially for code blocks. By default pygments, which pelican uses for code highlighting, didn't mesh well with my theme. I made sure to make my pre/code blocks have a dark background for one. I also wanted it to stop guessing the language (it was giving weird results trying to guess at the command line code blocks since they're not really a 'language' per se), and for it to recognize GitHub style fenced blocks (using backticks to surround code blocks instead of relying on indentation).&lt;/p&gt;
&lt;p&gt;I added this to my &lt;em&gt;pelicanconf.py&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;markdown.extensions.codehilite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guess_lang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;markdown.extensions.fenced_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Preview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;invoke build&lt;/code&gt; command looks at my &lt;em&gt;pelicanconf.py&lt;/em&gt; file for settings. Some of these settings are theme specific, but they also cover things like what is the site url, how many pages to show before paginating, and so forth. Below I will also be using &lt;em&gt;publishconf.py&lt;/em&gt; for prod settings like my Google Analytics tag and FQDN for the site url.&lt;/p&gt;
&lt;p&gt;Now that the &lt;em&gt;output&lt;/em&gt; directory has my generated content, I want to preview it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a simple local webserver to show you my content on http://localhost:8000 so I open Firefox and make sure everything seems to be working as expected. I click around, look for formatting weirdness, agonize internally over whether I chose the right theme or not, and then ultimately decide all is well.&lt;/p&gt;
&lt;p&gt;That's pretty cool, buuuuuuttttt:&lt;/p&gt;
&lt;h3&gt;Invoke&lt;/h3&gt;
&lt;p&gt;Let's dive a bit more into the &lt;strong&gt;invoke&lt;/strong&gt; command and the default &lt;em&gt;tasks.py&lt;/em&gt; file that is created.&lt;/p&gt;
&lt;p&gt;There are lot of built in invoke tasks in this file already like &lt;strong&gt;build&lt;/strong&gt;, &lt;strong&gt;serve&lt;/strong&gt;, and &lt;strong&gt;publish&lt;/strong&gt;. Below are my tweaks.&lt;/p&gt;
&lt;p&gt;First I remove the &lt;strong&gt;clean&lt;/strong&gt;, and &lt;strong&gt;rebuild&lt;/strong&gt; commands by commenting them out (maybe I'll redo them in the future). This is becaues they're destructive and will remove the &lt;em&gt;output&lt;/em&gt; folder entirely, but remember that I'm using it as a submodule so it is its own git repo. Deleting the whole folder would be too destructive.  I also comment out the &lt;strong&gt;preview&lt;/strong&gt; task as I only need to do a prod build when I'm publishing.&lt;/p&gt;
&lt;p&gt;Next I need to change how the &lt;strong&gt;publish&lt;/strong&gt; task works because I'm not using rsync to publish this, I'm pushing the content of output to my &lt;strong&gt;thebouv.github.io&lt;/strong&gt; repo so that it serves automatically with GitHub Pages.&lt;/p&gt;
&lt;p&gt;Because I'm running two back to back commands in order to commit the output and the raw content of the main repo, I had to split it into two tasks and have one run before the other. I tried combining this into a single command but it wasn't working. Only one git command would occur and I think that is because the context is lost after git takes control and starts to spit out messages. I'll have to revisit that some day just for curiosity's sake.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pelican_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-s &lt;/span&gt;&lt;span class="si"&gt;{settings_publish}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Commit the written content to GitHub from this repo&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deploy_path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;In Directory: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add .&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;auto-commit output from Invoke&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publish_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Commit the static html pages to thebouv.github.io repo&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my output folder&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;In Directory: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add .&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;auto-commit content from Invoke&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I only need to run &lt;code&gt;invoke publish&lt;/code&gt; and the &lt;em&gt;output&lt;/em&gt; directory is refreshed with my new generated site with prod settings from &lt;em&gt;publishconf.py&lt;/em&gt;. Then the &lt;strong&gt;thebouv.github.io&lt;/strong&gt; repo gets an auto-commit and push. Followed by &lt;strong&gt;thebouv-pelican&lt;/strong&gt; receiving an auto-commit as well (since the submodule has updated, this step commits updating the submodule to point to the new commit SHA of &lt;strong&gt;thebouv.github.io&lt;/strong&gt;).&lt;/p&gt;
&lt;h2&gt;But wait, there's more&lt;/h2&gt;
&lt;p&gt;I noticed in the default &lt;em&gt;task.py&lt;/em&gt; file that there is a livereload option. I had to try it out by installing the &lt;strong&gt;livereload&lt;/strong&gt; module and then invoking the task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install livereload
pip freeze &amp;gt; requirements.txt
invoke livereload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the browser nicely refreshes for me automatically as I edit and save. That's pretty damn handy.&lt;/p&gt;</content><category term="meta"></category><category term="pelican"></category><category term="python"></category><category term="invoke"></category></entry><entry><title>How I made this site (part one)</title><link href="https://thebouv.com/how-i-made-this-site-part-one.html" rel="alternate"></link><published>2021-03-14T00:00:00-06:00</published><updated>2021-03-14T00:00:00-06:00</updated><author><name>Anthony Bouvier</name></author><id>tag:thebouv.com,2021-03-14:/how-i-made-this-site-part-one.html</id><summary type="html">&lt;p&gt;First post on site, about making the site, while I'm building the site. So meta.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I chose to use &lt;a href="https://getpelican.org/"&gt;pelican&lt;/a&gt; for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This site is hosted for free on GitHub and that means it needs to be statically generated. &lt;/li&gt;
&lt;li&gt;Pelican is written in python and I'm a python fanboy.&lt;/li&gt;
&lt;li&gt;Pelican is still in active development based on the merges, issues, and discussion on its repo in GitHub.&lt;/li&gt;
&lt;li&gt;Pelican has all the features I need plus I can supplement with other things like &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; (which I just learned about and am excited to try).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the final structure, I will have one repo for the pelican install (&lt;em&gt;thebouv-pelican.git&lt;/em&gt;) which will have settings, pelican files, raw assets like a post's markdown files and images. And one for the static site files (&lt;em&gt;thebouv.github.io.git&lt;/em&gt;) because GitHub only serves from root or /docs. I feel this way is cleaner and allows the I will be automating publishing with &lt;strong&gt;invoke&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I am basing this process off of &lt;a href="https://randlow.github.io/posts/python/create-pelican-blog/"&gt;this tutorial&lt;/a&gt; but with some of my own ideas and organizational changes. Definitely fewer dependencies as I have no need for Jupyter Notebooks on this site, nor for now do I think I need typogrify or beautifulsoup as per that tutorial. I'll also be looking at the &lt;a href="https://docs.getpelican.com/en/latest/install.html"&gt;pelican quickstart&lt;/a&gt; and other pelican docs to make decisions as I go.&lt;/p&gt;
&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;First I cleared all previous content out of my previous static site and leave only the README.md and CNAME files. The README will get updated during the project and CNAME is a text file required by GitHub to have thebouv.com as a custom domain.  I could have set up a totally new repo or trashed this one and restarted, but with git I don't need to and I can always roll back one day or refer to the old site if I need.&lt;/p&gt;
&lt;h3&gt;Some git stuff&lt;/h3&gt;
&lt;p&gt;I create my empty repo for &lt;em&gt;thebouv-pelican&lt;/em&gt; and set it up in GitHub as a remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir thebouv-pelican
cd thebouv-pelican
git init
gh repo create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;em&gt;gh&lt;/em&gt; command. If you don't use the GitHub command line tool &lt;em&gt;gh&lt;/em&gt; yet I do recommend it. It is pretty handy.&lt;/p&gt;
&lt;h3&gt;Pelican!&lt;/h3&gt;
&lt;p&gt;Now to set up my python environment and start getting Pelican set up.  I'm doing this all with python 3.9.1 because it is stable and the most recent 3.9 release that pyenv has.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m venv .venv
source .venv/bin/activate
pip install &amp;quot;pelican[markdown]&amp;quot; invoke
pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now for the remainder of this post I'm going to no longer talk about being in a venv, activating, deactivating, etc. If I'm in a python project, I've got the venv activated. I assume the reader is managing this aspect.&lt;/p&gt;
&lt;p&gt;I'm going to run the &lt;em&gt;pelican_quickstart&lt;/em&gt; command line app and answer all the questions it poses. I'm filling out my site's details and pretty much accepting the defaults to things with defaults. Only thing is I'll be deleting the Makefile as I plan to use &lt;strong&gt;invoke&lt;/strong&gt; instead to run the tasks in tasks.py.&lt;/p&gt;
&lt;p&gt;I'm also manually creating a pages folder under the content folder generated by &lt;em&gt;pelican_quickstart&lt;/em&gt; because I will want some stand-alone non-blog pages in the future like a resume.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican_quickstart
rm -f Makefile
mkdir content/pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This leaves me with this structure below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;thebouv-pelican/
├── content
│   └── pages
├── output
├── pelicanconf.py       # Main settings file
├── publishconf.py       # Settings to use when ready to publish
└── requirements.txt     # saved earlier from pip freeze
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that those exist and I want to start adding content, I want to do one thing real quick. I want to make my output directory actually be a git submodule of &lt;em&gt;thebouv.github.io.git&lt;/em&gt; since the generated output will be in that repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git submodule add -f git@github.com:thebouv/thebouv.github.io.git output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Later I will automate committing and pushing both this repo and the generated content up to GitHub with &lt;em&gt;invoke&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Theme&lt;/h3&gt;
&lt;p&gt;For now I plan to use a theme that is inside this repo called &lt;a href="https://github.com/mc-buckets/brutalistpelican"&gt;brutalistpelican&lt;/a&gt; but host just a fork of the theme for my own version. I'm doing this because I don't need the rest of his pelican set up (I have my own which this post is about) and only the theme itself. After I clone their repo I move the theme folder out and set it all up as its own &lt;a href="https://github.com/thebouv/brutalist-theme"&gt;repo&lt;/a&gt;.  Then I can add the submodule like I wanted to do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git submodule add -f git@github.com:thebouv/brutalist-theme.git theme/brutalist-theme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I've definitely made some changes to the theme that I'm not going to go into detail on. One of the main things I've done is get rid of any external javascript except Google Analytics. I also tweak page width to 60em max (non-brutalist but I wanted a slightly wider content area). I'll be making more changes over time and if they're significant, I'll write about them but likely most will be slight tweaks.&lt;/p&gt;
&lt;p&gt;Any changes I make to the theme will need to be pushed up as well to its own repo but I can do it &lt;em&gt;from&lt;/em&gt; the submodule itself which is handy and something I will be automating with &lt;strong&gt;invoke&lt;/strong&gt; in part two of this post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd theme/brutal-theme
git add --all
git commit -m &amp;quot;some message about the changes I made&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Let's fire this baby up!&lt;/h2&gt;
&lt;p&gt;This article, the one I'm writing and you're reading, is the first post in my blog. So the instructions below are so I can test this out locally and see it for the first time in all its simple glory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This statically generates all the content and uses the theme to style it. Then it puts all those static files in output which you'll recall is a submodule. Then I can go into that folder add all the output to git and push it up. And since it is set up to be hosted by GitHub once this output is pushed up, my site will appear here at https://thebouv.com&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd output
git add --all
git commit -m &amp;quot;auto-generated output from pelican&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Next time&lt;/h3&gt;
&lt;p&gt;Okay, realize this is getting long and I have more to do but I've detailed everything that has gotten the site to this point.  Well, besides the fact that I switched themes like 5 times but I didn't need to document that part. ;)&lt;/p&gt;</content><category term="meta"></category><category term="pelican"></category><category term="python"></category></entry></feed>