<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>thebouv - Anthony Bouvier</title><link href="/" rel="alternate"></link><link href="/feeds/anthony-bouvier.atom.xml" rel="self"></link><id>/</id><updated>2021-04-05T00:00:00-05:00</updated><entry><title>Changing GitHub Enterprise users from LDAP to local</title><link href="/changing-github-enterprise-users-from-ldap-to-local.html" rel="alternate"></link><published>2021-04-05T00:00:00-05:00</published><updated>2021-04-05T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-04-05:/changing-github-enterprise-users-from-ldap-to-local.html</id><summary type="html">&lt;p&gt;I needed to have most users move to a different AD/LDAP server but leave a few behind on local logins. The instructions from GitHub support had issues I had to figure out on my own.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;The company I work for recently split off our entire software engineering team, part of other teams, and backoffice people into a stand alone independent software vendor. For the time being we're sharing a single GitHub Enterprise instance on prem and as part of the transition we've moved the new company staff off to their own Active Directory.&lt;/p&gt;
&lt;p&gt;Unlike other tooling I have in place like Jenkins or Harbor, GitHub Enterprise only supports using a single AD/LDAP server (version 3.0.4 as of the publishing of this post). So the 6 or so digital marketing developers left behind at the parent company have to be converted from LDAP auth to local authentication.&lt;/p&gt;
&lt;p&gt;Thankfully this is possible with GitHub Enterprise via this setting:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot of github admin settings to allow local account creation along side ldap accounts" src="images/github-enterprise-ldap-local-setting.png"&gt;&lt;/p&gt;
&lt;h2&gt;But?&lt;/h2&gt;
&lt;p&gt;The issue is that accounts that were previously LDAP are flagged as that and this setting only allows for new accounts.&lt;/p&gt;
&lt;p&gt;I asked GitHub for instructions on how to convert those accounts and they sent me some ghe-console commands to run. And here is what they sent me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If enabled, temporarily disable LDAP sync to prevent it from re-writing the LDAP associations.&lt;/p&gt;
&lt;p&gt;Connect to the server via SSH. Destroy the LDAP mapping for the users you'd like to switch to built-in authentication and set a default password for those users: (replace USERNAME with the user's actual GitHub username, and replace NEW_PASSWORD with a temporary password)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="n"&gt;ghe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USERNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldap_mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroy&lt;/span&gt;
  &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;NEW_PASSWORD&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USERNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure these users are not in the LDAP directory before they attempt to login again.  &lt;/p&gt;
&lt;p&gt;Re-enable LDAP sync if necessary.&lt;/p&gt;
&lt;p&gt;Instruct users to update passwords after logging in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No doubt this is from their support team's knowledgebase. The problem is it throws errors on trying to use the code as-is.&lt;/p&gt;
&lt;p&gt;Of course, I only had a few tracebacks to go off of like this one for &lt;code&gt;update_attributes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
        3: from /github/script/console:92:in `&amp;lt;main&amp;gt;&amp;#39;
        2: from (irb):4
        1: from /github/vendor/gems/2.7.1/ruby/2.7.0/gems/activemodel-6.1.0.rc1.8389f99/lib/active_model/attribute_methods.rb:469:in `method_missing&amp;#39;
NoMethodError (undefined method `update_attributes&amp;#39; for #&amp;lt;User:0x000000000000&amp;gt;)
Did you mean?  update_attribute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So then I tried to change it to &lt;code&gt;update_attribute&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):
        4: from /github/script/console:92:in `&amp;lt;main&amp;gt;&amp;#39;
        3: from (irb):4
        2: from (irb):5:in `rescue in irb_binding&amp;#39;
        1: from /github/vendor/gems/2.7.1/ruby/2.7.0/gems/activerecord-6.1.0.rc1.8389f99/lib/active_record/persistence.rb:612:in `update_attribute&amp;#39;
ArgumentError (wrong number of arguments (given 1, expected 2))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Damn. Well, it sorta &lt;em&gt;looks&lt;/em&gt; like I'm sending two arguments instead of one, so what's going on?&lt;/p&gt;
&lt;p&gt;Since I now know we're dealing with Ruby in the &lt;em&gt;ghe-console&lt;/em&gt; I start looking up some docs and find out that &lt;strong&gt;update_attribute&lt;/strong&gt; only does one attribute at a time and whatever format I'm sending it doesn't like.&lt;/p&gt;
&lt;p&gt;I also look up &lt;strong&gt;update_attributes&lt;/strong&gt; and find out it was deprecated. You only need &lt;strong&gt;update&lt;/strong&gt; in this case. So I try &lt;strong&gt;update&lt;/strong&gt; with the same params and it worked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password_confirmation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or what I originally tried works too using a different syntax for sending the attributes that I saw in the &lt;strong&gt;update&lt;/strong&gt; documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Gut?&lt;/h2&gt;
&lt;p&gt;Mostly just chose that subtitle to rhyme with the others, but actually using your gut to do such debugging is something I recommend. The longer you're in this business, the more experience you have running up against just weird scenarios like the above. My vendor gave me syntax that was actually out of date, but I used the info given to me for a language I have zero experience with to debug what to do next.&lt;/p&gt;
&lt;p&gt;And I wrote them back to let them know to update their knowledgebase.&lt;/p&gt;
&lt;p&gt;So follow your gut! Know how to look up docs even for things you don't know about or langauges you're unfamiliar with. &lt;/p&gt;
&lt;p&gt;Deduce. Experiment. Test. Repeat. It becomes second nature.&lt;/p&gt;</content><category term="misc"></category><category term="github"></category><category term="devops"></category></entry><entry><title>Don't idolize Elon Musk</title><link href="/dont-idolize-elon-musk.html" rel="alternate"></link><published>2021-04-02T00:00:00-05:00</published><updated>2021-04-02T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-04-02:/dont-idolize-elon-musk.html</id><summary type="html">&lt;p&gt;I responded to someone on LinkedIn shaming people for using "I don't have time" as an excuse and praising Elon Musk's overworking habits. Wanted to capture my response here as well.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's not try to normalize working 85-100 hours a week. That's ridiculous. And shame on you for holding that up as something to aspire too. &lt;/p&gt;
&lt;p&gt;Before spouting some glorification of overworking why don't you do a little math?&lt;/p&gt;
&lt;p&gt;Let's be generous and use the whole seven days in a week. &lt;/p&gt;
&lt;p&gt;168 hours in a week. &lt;/p&gt;
&lt;p&gt;He works 100 leaving 68. Certainly he sleeps but let's say he doesn't get a full 8 (even though that's healthiest). Let's say 6 per night. &lt;/p&gt;
&lt;p&gt;That's 42 hours sleeping. &lt;/p&gt;
&lt;p&gt;So after working and sleeping he's got 26 hours or under 4 hours per day. To eat. And be a parent (lololololol) and a husband and whatever he wants to do "for fun".&lt;/p&gt;
&lt;p&gt;Sounds terrible. No thank you.&lt;/p&gt;
&lt;p&gt;Or maybe this isn't true and "I don't have time" is short for some peoples "I'm depressed because of the pandemic" or "it's hard to balance work and kids and house work when you don't have a billion dollars and staff on hand to do things for you". &lt;/p&gt;
&lt;p&gt;He literally has enough money to have someone wipe his bum for him to save time.&lt;/p&gt;
&lt;p&gt;We're not going to compare ourselves to Elon. No one should. Stop being gross.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.linkedin.com/posts/thomas-reck_elon-musk-works-around-85-until-100-hours-activity-6776786764372701184-2e3x"&gt;original post&lt;/a&gt;  &lt;/p&gt;</content><category term="career"></category><category term="career"></category></entry><entry><title>First rack for my homelab</title><link href="/first-rack-for-my-homelab.html" rel="alternate"></link><published>2021-03-20T00:00:00-05:00</published><updated>2021-03-20T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-03-20:/first-rack-for-my-homelab.html</id><summary type="html">&lt;p&gt;My first open rack for the homelab and the initial equipment I've put in it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="home lab open rack with new Unifi equipment" src="images/homelab-not-pretty-yet.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It ain’t pretty yet but it’s a start and it’s been mostly fun so far!&lt;/p&gt;
&lt;p&gt;I say mostly fun because running cables in a home from 1914 is a pain in the behind. A lot of plaster and lath walls makes it a challenge and though I haven't had to mess with it too much, I've been doing some planning after getting this equipment and woooooo it will be a hard fight with this old house.&lt;/p&gt;
&lt;p&gt;Equipment pictured above:&lt;br&gt;
Unifi Dream Machine Pro&lt;br&gt;
Unifi PoE switch&lt;br&gt;
AmpliFi HD Mesh&lt;br&gt;
Echogear 20u open rack&lt;/p&gt;
&lt;p&gt;Currently using AmpliFi to create a mesh while I wait for access points for the UDM Pro. Then I’ll just use it as a backup and store it, or see if I can set it up for my daughter's apartment.&lt;/p&gt;
&lt;p&gt;You can also see my stack of ThinkCenter tinys and my Raspberry Pi cluster. I actually plan to rack the Raspberry Pis with a mount I found made for them (either 1u for three or 3u for sideways mounting around 12-15). Not sure how I’m going to arrange the ThinkCenters yet.&lt;/p&gt;
&lt;p&gt;You can also see my tiny little pihole dns servers in their neon green cases. I love the Pi Zero form factor.&lt;/p&gt;
&lt;p&gt;In case I didn’t bring it up before the raspberry pi 4s are for a Kubernetes cluster which will be for continuous learning and experiments, but also to run some custom apps I’m building for my home. And the ThinkCenters are for a Proxmox cluster for vms, experiments, etc.&lt;/p&gt;</content><category term="homelab"></category><category term="homelab"></category><category term="networking"></category></entry><entry><title>Temperature and Humidity Sensors (part one)</title><link href="/temperature-and-humidity-sensors-part-one.html" rel="alternate"></link><published>2021-03-18T00:00:00-05:00</published><updated>2021-03-18T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-03-18:/temperature-and-humidity-sensors-part-one.html</id><summary type="html">&lt;p&gt;I have a home from 1914 which has a lot of charm and a lot of issues. One of which is the need to constantly pay attention to the humidity levels and temperature in all floors, finished and unfinished, in the house. This project of my homelab will cover the hardware and custom software I write for it.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;I have a home from 1914 which has a lot of charm and a lot of issues. One of which is the need to constantly pay attention to the humidity levels and temperature in all floors, finished and unfinished, in the house. This project of my homelab will cover the hardware and custom software I write for it.&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;4x Raspberry Pi Zero WH (just like the W, but with pre-soldered headers on the GPIO)&lt;br&gt;
4x Raspberry Pi official zero w cases&lt;br&gt;
4x Raspberry Pi official power supplies&lt;br&gt;
4x Gigastone 16gb MicroSDHC  &lt;/p&gt;
&lt;h3&gt;Operating System&lt;/h3&gt;
&lt;p&gt;Though I wish I could use Ubuntu LTS on the Pi Zero W, it doesn't seem to be supported or I at least haven't been able to find out how to boot it. Like my pihole project for the lab, I'm using the most recent official Raspberry Pi OS Lite (because I don't want a desktop environment on this headless computer). And of course I use the Raspberry Pi Imager -- it's just really convenient.&lt;/p&gt;
&lt;p&gt;After I image the SD card I make a couple changes to the config.txt file on the card itself from the host machine I did the imaging from.  This is so I can set the gpu mem split and disable bluetooth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: when the Raspberry Pi imager is done it unmounts the SD card, so you'll need to plug it back in to your host machine to edit the config.txt file.  On my Mac, it mounts as &lt;em&gt;boot&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I add these two lines config.txt. There are a couple of lines that already set dtoverlay that are commented out, so I just put both of these in that area:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gpu_mem=16
dtoverlay=disable-bt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Wi-Fi&lt;/h3&gt;
&lt;p&gt;I also want to go ahead and set up the wifi on the pi zero so that when I turn it on it automatically connects.&lt;/p&gt;
&lt;p&gt;Following this &lt;a href="https://learn.adafruit.com/raspberry-pi-zero-creation/text-file-editing"&gt;tutorial&lt;/a&gt; I create the &lt;em&gt;wpa_supplicant.conf&lt;/em&gt; file on the root level of the boot drive while the SD is still connected.&lt;/p&gt;
&lt;h3&gt;SSH&lt;/h3&gt;
&lt;p&gt;SSH is disabled by default so since I want to log in soon after booting it and stay headless, I merely need to add a blank file named &lt;em&gt;ssh&lt;/em&gt; to the root level of the ssd that I still have mounted.&lt;/p&gt;
&lt;p&gt;Once I've done that I eject the SD card and install it into the pi zero.&lt;/p&gt;
&lt;h2&gt;First Boot&lt;/h2&gt;
&lt;p&gt;After I first boot, I want to make sure to make some changes to each device. There's probably a way to get fancy and make this super repeatable, but I'm not installing 100 sensors; I'm installing 4.&lt;/p&gt;
&lt;h3&gt;Wrap Up Setup&lt;/h3&gt;
&lt;p&gt;I find the device on my network by looking at my Unifi OS that shows the whole network as a map and I just found the device and ip there, but I could also scan the network from the command line and look for Raspberry Pi MAC addresses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;arp -a | grep -i &amp;quot;b8:27:eb\|dc:a6:32&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or if you're on a Mac or a Windows machine that has Bonjour set up you might be able to talk to it at its default hostname on .local via &lt;em&gt;raspberrypi.local&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh pi@ip.address.you.found
# or 
ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: If you use ssh pi@raspberrypi.local more than once because you're setting up multiple sensors, keep in mind ssh is going to complain that raspberrypi.local doesn't match the fingerprint from the last time you did it. Cause each device you set up is unique, but ssh doesn't know that. So I suggest using the IP because it is more likely to be different. And below we're giving each their own hostname anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Change the default password (always a smart thing to do):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update apt and upgrade the OS packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Update the hostname. I'm going with a naming scheme of 'temphum1', 'temphum2', etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo vi /etc/hostname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now let's shut it down for now because we're going to be installing the sensor and doing some soldering next before we turn this device back on.&lt;/p&gt;
&lt;p&gt;The part two of this post will be abour the physical aspects of the project like testing out on a breadboard and soldering the real thing together.&lt;/p&gt;</content><category term="homelab"></category><category term="homelab"></category><category term="raspberrypi"></category></entry><entry><title>How I made this site (part two)</title><link href="/how-i-made-this-site-part-two.html" rel="alternate"></link><published>2021-03-15T00:00:00-05:00</published><updated>2021-03-15T00:00:00-05:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-03-15:/how-i-made-this-site-part-two.html</id><summary type="html">&lt;p&gt;Now to finish off the tutorial on how I made this site including previewing the content and automating some tasks with invoke.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last I left off in &lt;a href="how-i-made-this-site-part-one.html"&gt;part one&lt;/a&gt; I generated the content with &lt;code&gt;invoke build&lt;/code&gt;. I want to go over the remaining steps on how to preview the content, how I'm publishing it to GitHub pages with the submodule created previously, and also how I plan to use &lt;strong&gt;invoke&lt;/strong&gt; to automate some of this.&lt;/p&gt;
&lt;h2&gt;Markdown Tweaks&lt;/h2&gt;
&lt;p&gt;First before previewing the content, I had to make some adjustments to how the Markdown is processed, especially for code blocks. By default pygments, which pelican uses for code highlighting, didn't mesh well with my theme. I made sure to make my pre/code blocks have a dark background for one. I also wanted it to stop guessing the language (it was giving weird results trying to guess at the command line code blocks since they're not really a 'language' per se), and for it to recognize GitHub style fenced blocks (using backticks to surround code blocks instead of relying on indentation).&lt;/p&gt;
&lt;p&gt;I added this to my &lt;em&gt;pelicanconf.py&lt;/em&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extension_configs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;markdown.extensions.codehilite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;guess_lang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;markdown.extensions.fenced_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;output_format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Preview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;invoke build&lt;/code&gt; command looks at my &lt;em&gt;pelicanconf.py&lt;/em&gt; file for settings. Some of these settings are theme specific, but they also cover things like what is the site url, how many pages to show before paginating, and so forth. Below I will also be using &lt;em&gt;publishconf.py&lt;/em&gt; for prod settings like my Google Analytics tag and FQDN for the site url.&lt;/p&gt;
&lt;p&gt;Now that the &lt;em&gt;output&lt;/em&gt; directory has my generated content, I want to preview it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a simple local webserver to show you my content on http://localhost:8000 so I open Firefox and make sure everything seems to be working as expected. I click around, look for formatting weirdness, agonize internally over whether I chose the right theme or not, and then ultimately decide all is well.&lt;/p&gt;
&lt;p&gt;That's pretty cool, buuuuuuttttt:&lt;/p&gt;
&lt;h3&gt;Invoke&lt;/h3&gt;
&lt;p&gt;Let's dive a bit more into the &lt;strong&gt;invoke&lt;/strong&gt; command and the default &lt;em&gt;tasks.py&lt;/em&gt; file that is created.&lt;/p&gt;
&lt;p&gt;There are lot of built in invoke tasks in this file already like &lt;strong&gt;build&lt;/strong&gt;, &lt;strong&gt;serve&lt;/strong&gt;, and &lt;strong&gt;publish&lt;/strong&gt;. Below are my tweaks.&lt;/p&gt;
&lt;p&gt;First I remove the &lt;strong&gt;clean&lt;/strong&gt;, and &lt;strong&gt;rebuild&lt;/strong&gt; commands by commenting them out (maybe I'll redo them in the future). This is becaues they're destructive and will remove the &lt;em&gt;output&lt;/em&gt; folder entirely, but remember that I'm using it as a submodule so it is its own git repo. Deleting the whole folder would be too destructive.  I also comment out the &lt;strong&gt;preview&lt;/strong&gt; task as I only need to do a prod build when I'm publishing.&lt;/p&gt;
&lt;p&gt;Next I need to change how the &lt;strong&gt;publish&lt;/strong&gt; task works because I'm not using rsync to publish this, I'm pushing the content of output to my &lt;strong&gt;thebouv.github.io&lt;/strong&gt; repo so that it serves automatically with GitHub Pages.&lt;/p&gt;
&lt;p&gt;Because I'm running two back to back commands in order to commit the output and the raw content of the main repo, I had to split it into two tasks and have one run before the other. I tried combining this into a single command but it wasn't working. Only one git command would occur and I think that is because the context is lost after git takes control and starts to spit out messages. I'll have to revisit that some day just for curiosity's sake.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pelican_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-s &lt;/span&gt;&lt;span class="si"&gt;{settings_publish}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Commit the written content to GitHub from this repo&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deploy_path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;In Directory: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add .&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;auto-commit output from Invoke&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publish_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Commit the static html pages to thebouv.github.io repo&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# my output folder&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;In Directory: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add .&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git commit -m &amp;quot;auto-commit content from Invoke&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I only need to run &lt;code&gt;invoke publish&lt;/code&gt; and the &lt;em&gt;output&lt;/em&gt; directory is refreshed with my new generated site with prod settings from &lt;em&gt;publishconf.py&lt;/em&gt;. Then the &lt;strong&gt;thebouv.github.io&lt;/strong&gt; repo gets an auto-commit and push. Followed by &lt;strong&gt;thebouv-pelican&lt;/strong&gt; receiving an auto-commit as well (since the submodule has updated, this step commits updating the submodule to point to the new commit SHA of &lt;strong&gt;thebouv.github.io&lt;/strong&gt;).&lt;/p&gt;
&lt;h2&gt;But wait, there's more&lt;/h2&gt;
&lt;p&gt;I noticed in the default &lt;em&gt;task.py&lt;/em&gt; file that there is a livereload option. I had to try it out by installing the &lt;strong&gt;livereload&lt;/strong&gt; module and then invoking the task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install livereload
pip freeze &amp;gt; requirements.txt
invoke livereload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the browser nicely refreshes for me automatically as I edit and save. That's pretty damn handy.&lt;/p&gt;</content><category term="meta"></category><category term="pelican"></category><category term="python"></category><category term="invoke"></category></entry><entry><title>How I made this site (part one)</title><link href="/how-i-made-this-site-part-one.html" rel="alternate"></link><published>2021-03-14T00:00:00-06:00</published><updated>2021-03-14T00:00:00-06:00</updated><author><name>Anthony Bouvier</name></author><id>tag:None,2021-03-14:/how-i-made-this-site-part-one.html</id><summary type="html">&lt;p&gt;First post on site, about making the site, while I'm building the site. So meta.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I chose to use &lt;a href="https://getpelican.com/"&gt;pelican&lt;/a&gt; for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This site is hosted for free on GitHub and that means it needs to be statically generated. &lt;/li&gt;
&lt;li&gt;Pelican is written in python and I'm a python fanboy.&lt;/li&gt;
&lt;li&gt;Pelican is still in active development based on the merges, issues, and discussion on its repo in GitHub.&lt;/li&gt;
&lt;li&gt;Pelican has all the features I need plus I can supplement with other things like &lt;a href="http://www.pyinvoke.org/"&gt;invoke&lt;/a&gt; (which I just learned about and am excited to try).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the final structure, I will have one repo for the pelican install (&lt;em&gt;thebouv-pelican.git&lt;/em&gt;) which will have settings, pelican files, raw assets like a post's markdown files and images. And one for the static site files (&lt;em&gt;thebouv.github.io.git&lt;/em&gt;) because GitHub only serves from root or /docs. I feel this way is cleaner and allows the I will be automating publishing with &lt;strong&gt;invoke&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I am basing this process off of &lt;a href="https://randlow.github.io/posts/python/create-pelican-blog/"&gt;this tutorial&lt;/a&gt; but with some of my own ideas and organizational changes. Definitely fewer dependencies as I have no need for Jupyter Notebooks on this site, nor for now do I think I need typogrify or beautifulsoup as per that tutorial. I'll also be looking at the &lt;a href="https://docs.getpelican.com/en/latest/install.html"&gt;pelican quickstart&lt;/a&gt; and other pelican docs to make decisions as I go.&lt;/p&gt;
&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;First I cleared all previous content out of my previous static site and leave only the README.md and CNAME files. The README will get updated during the project and CNAME is a text file required by GitHub to have thebouv.com as a custom domain.  I could have set up a totally new repo or trashed this one and restarted, but with git I don't need to and I can always roll back one day or refer to the old site if I need.&lt;/p&gt;
&lt;h3&gt;Some git stuff&lt;/h3&gt;
&lt;p&gt;I create my empty repo for &lt;em&gt;thebouv-pelican&lt;/em&gt; and set it up in GitHub as a remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir thebouv-pelican
cd thebouv-pelican
git init
gh repo create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;em&gt;gh&lt;/em&gt; command. If you don't use the GitHub command line tool &lt;em&gt;gh&lt;/em&gt; yet I do recommend it. It is pretty handy.&lt;/p&gt;
&lt;h3&gt;Pelican!&lt;/h3&gt;
&lt;p&gt;Now to set up my python environment and start getting Pelican set up.  I'm doing this all with python 3.9.1 because it is stable and the most recent 3.9 release that pyenv has.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python -m venv .venv
source .venv/bin/activate
pip install &amp;quot;pelican[markdown]&amp;quot; invoke
pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now for the remainder of this post I'm going to no longer talk about being in a venv, activating, deactivating, etc. If I'm in a python project, I've got the venv activated. I assume the reader is managing this aspect.&lt;/p&gt;
&lt;p&gt;I'm going to run the &lt;em&gt;pelican_quickstart&lt;/em&gt; command line app and answer all the questions it poses. I'm filling out my site's details and pretty much accepting the defaults to things with defaults. Only thing is I'll be deleting the Makefile as I plan to use &lt;strong&gt;invoke&lt;/strong&gt; instead to run the tasks in tasks.py.&lt;/p&gt;
&lt;p&gt;I'm also manually creating a pages folder under the content folder generated by &lt;em&gt;pelican_quickstart&lt;/em&gt; because I will want some stand-alone non-blog pages in the future like a resume.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican_quickstart
rm -f Makefile
mkdir content/pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This leaves me with this structure below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;thebouv-pelican/
├── content
│   └── pages
├── output
├── pelicanconf.py       # Main settings file
├── publishconf.py       # Settings to use when ready to publish
└── requirements.txt     # saved earlier from pip freeze
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that those exist and I want to start adding content, I want to do one thing real quick. I want to make my output directory actually be a git submodule of &lt;em&gt;thebouv.github.io.git&lt;/em&gt; since the generated output will be in that repo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git submodule add -f git@github.com:thebouv/thebouv.github.io.git output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Later I will automate committing and pushing both this repo and the generated content up to GitHub with &lt;em&gt;invoke&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Theme&lt;/h3&gt;
&lt;p&gt;For now I plan to use a theme that is inside this repo called &lt;a href="https://github.com/mc-buckets/brutalistpelican"&gt;brutalistpelican&lt;/a&gt; but host just a fork of the theme for my own version. I'm doing this because I don't need the rest of his pelican set up (I have my own which this post is about) and only the theme itself. After I clone their repo I move the theme folder out and set it all up as its own &lt;a href="https://github.com/thebouv/brutalist-theme"&gt;repo&lt;/a&gt;.  Then I can add the submodule like I wanted to do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git submodule add -f git@github.com:thebouv/brutalist-theme.git theme/brutalist-theme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I've definitely made some changes to the theme that I'm not going to go into detail on. One of the main things I've done is get rid of any external javascript except Google Analytics. I also tweak page width to 60em max (non-brutalist but I wanted a slightly wider content area). I'll be making more changes over time and if they're significant, I'll write about them but likely most will be slight tweaks.&lt;/p&gt;
&lt;p&gt;Any changes I make to the theme will need to be pushed up as well to its own repo but I can do it &lt;em&gt;from&lt;/em&gt; the submodule itself which is handy and something I will be automating with &lt;strong&gt;invoke&lt;/strong&gt; in part two of this post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd theme/brutal-theme
git add --all
git commit -m &amp;quot;some message about the changes I made&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Let's fire this baby up!&lt;/h2&gt;
&lt;p&gt;This article, the one I'm writing and you're reading, is the first post in my blog. So the instructions below are so I can test this out locally and see it for the first time in all its simple glory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;invoke build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This statically generates all the content and uses the theme to style it. Then it puts all those static files in output which you'll recall is a submodule. Then I can go into that folder add all the output to git and push it up. And since it is set up to be hosted by GitHub once this output is pushed up, my site will appear here at https://thebouv.com&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd output
git add --all
git commit -m &amp;quot;auto-generated output from pelican&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Next time&lt;/h3&gt;
&lt;p&gt;Okay, realize this is getting long and I have more to do but I've detailed everything that has gotten the site to this point.  Well, besides the fact that I switched themes like 5 times but I didn't need to document that part. ;)&lt;/p&gt;</content><category term="meta"></category><category term="pelican"></category><category term="python"></category></entry></feed>